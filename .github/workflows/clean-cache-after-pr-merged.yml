on: 
  pull_request: 
    types: 
      - closed

jobs:
  clean-cache:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    name: Clean Cache
    steps:
      - name: Create Context JSON file
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo $GITHUB_CONTEXT >> github.json

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ./github.json
          name: github-context
    
      - name: Clean Cache
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('Starting cache cleanup process...');

            // Access the head ref from the pull request event context
            const headRef = 'refs/heads/' + context.payload.pull_request.number + '/merge';
            console.log('Head ref:', headRef);

            const { data: { actions_caches } } = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            if (!actions_caches) {
              console.log('No caches found.');
              return;
            }

            console.log('Fetched caches:', actions_caches);

            // Filter caches by comparing to the headRef
            const cacheIds = actions_caches.filter(cache => cache.ref === headRef).map(cache => cache.id);
            const uniqueCacheIds = [...new Set(cacheIds)];

            console.log('Cache IDs to delete:', uniqueCacheIds);

            for (const id of uniqueCacheIds) {
              await github.rest.actions.deleteActionsCacheById({
                owner: context.repo.owner,
                repo: context.repo.repo,
                cache_id: id,
              });
              console.log(`Deleted cache with ID: ${id}`);
            }

            console.log('Cache cleanup process completed.');
