name: continuous integration

on:
  workflow_dispatch:
#   schedule:
#     - cron: "*/6 * * * *"

# env:
#   ENVRIONMENT: |
#     ${{ 
#       (1 == 1 && 'prod')
#       || ( 1 == 0 && 'stage')
#     }}

jobs:
  shell_validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        
      - run: mkdir report/
      
      - name: Check Artifact Files
        id: check-artifacts
        run: echo "::set-output name=has_files::$(if [ -n "$(ls -A report/ 2>/dev/null)" ]; then echo true; else echo false; fi)"
        
      - run: echo "Okay, there is a file at least!"
        if: steps.check-artifacts.outputs.has_files == true
        
  build:
    runs-on: ubuntu-latest
    if: 1 == 2
    steps:
      - uses: actions/checkout@v2
        
      - run: echo "Build"

  unit-tests:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Unit Test"
        
  danger-pr-check:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Danger PR Check"
        
  linters:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Linters"
      
  static-analysis:
    runs-on: ubuntu-latest
    needs: [unit-tests, danger-pr-check, linters]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Static Analysis"
          
  query-map-sync:
    runs-on: ubuntu-latest
    needs: [static-analysis]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Query Map Sync"
          
  push-to-staging:
    if: 1 == 1
    runs-on: ubuntu-latest
    needs: [query-map-sync]
    strategy:
      matrix:
        clients: [aje, aja, ajb, ajc, ajm]
    environment: 
      name: Staging
      url: ${{ steps.push-to-vip.outputs.url_output }}
    steps:
      - uses: actions/checkout@v2

      - run: echo "Push to Staging ${{ matrix.clients }}"
          
      - name: Push to VIP
        id: push_to_vip
        run: |
          echo "::set-output name=url_output::https://staging.${{ matrix.clients }}.aj-harbinger.com"

  blocker-tests-desktop-staging:
    runs-on: ubuntu-latest
    needs: [push-to-staging]
    outputs:
      status: ${{ job.status }}
    strategy:
      matrix:
        clients: [aje, aja, ajb, ajc, ajm]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Blocker Tests Desktop ${{ matrix.clients }}"
          
  blocker-tests-mobile-staging:
    runs-on: ubuntu-latest
    needs: [push-to-staging]
    outputs:
      status: ${{ job.status }}
    strategy:
      matrix:
        clients: [aje, aja, ajb, ajc, ajm]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Blocker Tests Mobile ${{ matrix.clients }}"
          
  blocker-tests-graphql-staging:
    runs-on: ubuntu-latest
    needs: [push-to-staging]
    outputs:
      status: ${{ job.status }}
    strategy:
      matrix:
        clients: [aje, aja, ajb, ajc, ajm]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Blocker Tests GrapQL ${{ matrix.clients }}"
          
  push-to-production:
    if: 1 == 2
    runs-on: ubuntu-latest
    needs: [static-analysis]
    environment:
      name: Production
      url: ${{ steps.push_to_vip.outputs.url_output }}
    steps:
      - uses: actions/checkout@v2
        
      - name: Set Environments
        run: |
          echo SITE_NAME=aja >> $GITHUB_ENV
          
      - run: echo "Push to Production"

      - name: Push to VIP
        id: push_to_vip
        env:
          URL: |
            ${{ 
              ( env.SITE_NAME == 'aje' && 'https://aljazeera.com' )
              || ( env.SITE_NAME == 'aja' && 'https://aljazeera.net')
              || ( env.SITE_NAME == 'ajb' && 'https://balkans.aljazeera.net' )
              || ( env.SITE_NAME == 'ajc' && 'https://chinese.aljazeera.net' )
              || ( env.SITE_NAME == 'ajm' && 'https://mubasher.aljazeera.net' )
            }}
        run: |
          echo "::set-output name=url_output::$URL"
 
  blocker-tests-desktop-production:
    runs-on: ubuntu-latest
    needs: [push-to-production]
    outputs:
      status: ${{ job.status }}
    strategy:
      matrix:
        clients: [aje, aja, ajb, ajc, ajm]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Blocker Tests Desktop ${{ matrix.clients }}"
         
  blocker-tests-mobile-production:
    runs-on: ubuntu-latest
    needs: [push-to-production]
    outputs:
      status: ${{ job.status }}
    strategy:
      matrix:
        clients: [aje, aja, ajb, ajc, ajm]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Blocker Tests Desktop ${{ matrix.clients }}"
          
  blocker-tests-graphql-production:
    runs-on: ubuntu-latest
    needs: [push-to-production]
    outputs:
      status: ${{ job.status }}
    strategy:
      matrix:
        clients: [aje, aja, ajb, ajc, ajm]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Blocker Tests Desktop ${{ matrix.clients }}"
          
  slack-notification:
    runs-on: ubuntu-latest
    needs: [build, danger-pr-check, linters, unit-tests, static-analysis, query-map-sync, push-to-staging, blocker-tests-desktop-staging, blocker-tests-mobile-staging, blocker-tests-graphql-staging]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Quality Report"
          
  quality-report:
    runs-on: ubuntu-latest
    needs: [slack-notification]
    if: |
      ${{ 
        needs.blocker-tests-graphql-production.outputs.status == 'success' 
        || needs.blocker-tests-desktop-production.outputs.status == 'success' 
        || needs.blocker-tests-mobile-production.outputs.status == 'success' 
        || needs.blocker-tests-graphql-staging.outputs.status == 'success' 
        || needs.blocker-tests-desktop-staging.outputs.status == 'success' 
        || needs.blocker-tests-mobile-staging.outputs.status == 'success' 
      }}
    steps:
      - uses: actions/checkout@v2

      - run: echo "Quality Report"
        
#   github-context:
#     if: needs.job1.result == 'success' || needs.job2.result == 'success'
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2

#       - name: Dump GitHub context
#         env:
#           GITHUB_CONTEXT: ${{ toJSON(github) }}
#         run: echo "$GITHUB_CONTEXT" > github_context.json

#       - name: Upload Test Results
#         if: always()
#         uses: actions/upload-artifact@v2
#         with:
#           path: github_context.json


  # TODO: after the pull request is merged into the develop we will execute the following jobs
  # push-to-develop:
  # blocker-tests:
  # contract-tests
  # performance-tests
