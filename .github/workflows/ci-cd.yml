name: continuous integration

on:
  workflow_dispatch:
  push:
    branches: main
    paths-ignore: 
      - .github/workflows/tests.yml

env:
  ENVIRONMENT: |
    ${{
      (1 == 1 && 'prod')
      || ( 1 == 2 && 'stage')
    }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        
      - run: echo "Build"

  unit-tests:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Unit Test"
        
  danger-pr-check:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Danger PR Check"
        
  linters:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Linters"
      
  static-analysis:
    runs-on: ubuntu-latest
    needs: [unit-tests, danger-pr-check, linters]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Static Analysis"
          
  query-map-sync:
    runs-on: ubuntu-latest
    if: 1 == 1
    needs: [static-analysis]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Query Map Sync"
          
  push-to-staging:
    runs-on: ubuntu-latest
    needs: [query-map-sync]
    outputs:
      status: ${{ job.status }}
    strategy:
      matrix:
        clients: [aje, aja, ajb, ajc, ajm]
    environment: 
      name: Staging
      url: ${{ steps.push-to-vip.outputs.url_output }}
    steps:
      - uses: actions/checkout@v2

      - run: echo "Push to Staging ${{ matrix.clients }}"
          
      - name: Push to VIP
        id: push_to_vip
        run: |
          echo "::set-output name=url_output::https://staging.${{ matrix.clients }}.aj-harbinger.com"
          
  push-to-production:
    runs-on: ubuntu-latest
    if: 1 == 2
    needs: [static-analysis]
    outputs:
      status: ${{ job.status }}
    environment:
      name: Production
      url: ${{ steps.push_to_vip.outputs.url_output }}
    steps:
      - uses: actions/checkout@v2
        
      - name: Set Environments
        run: |
          echo SITE_NAME=aja >> $GITHUB_ENV
          
      - run: echo "Push to Production"

      - name: Push to VIP
        id: push_to_vip
        env:
          URL: |
            ${{ 
              ( env.SITE_NAME == 'aje' && 'https://aljazeera.com' )
              || ( env.SITE_NAME == 'aja' && 'https://aljazeera.net')
              || ( env.SITE_NAME == 'ajb' && 'https://balkans.aljazeera.net' )
              || ( env.SITE_NAME == 'ajc' && 'https://chinese.aljazeera.net' )
              || ( env.SITE_NAME == 'ajm' && 'https://mubasher.aljazeera.net' )
            }}
        run: |
          echo "::set-output name=url_output::$URL"

  blocker-tests-desktop:
    runs-on: ubuntu-latest
    needs: [push-to-staging, push-to-production]
    if: always() && (needs.push-to-production.outputs.status == 'success' || needs.push-to-staging.outputs.status == 'success')
    outputs:
      status: ${{ job.status }}
    strategy:
      matrix:
        clients: [aje, aja, ajb, ajc, ajm]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Blocker Tests Desktop ${{ matrix.clients }}"
        
      - run: |
          echo $ENVIRONMENT
          echo $env.ENVIRONMENT
          echo ${{ env.ENVIRONMENT }}
          echo "$ENVIRONMENT"
          echo "$env.ENVIRONMENT"
          echo "${{ env.ENVIRONMENT }}"
          
  blocker-tests-mobile:
    runs-on: ubuntu-latest
    needs: [push-to-staging, push-to-production]
    if: always() && (needs.push-to-production.outputs.status == 'success' || needs.push-to-staging.outputs.status == 'success')
    outputs:
      status: ${{ job.status }}
    strategy:
      matrix:
        clients: [aje, aja, ajb, ajc, ajm]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Blocker Tests Mobile ${{ matrix.clients }}"
          
  blocker-tests-graphql:
    runs-on: ubuntu-latest
    needs: [push-to-staging, push-to-production]
    if: always() && (needs.push-to-production.outputs.status == 'success' || needs.push-to-staging.outputs.status == 'success')
    outputs:
      status: ${{ job.status }}
    strategy:
      matrix:
        clients: [aje, aja, ajb, ajc, ajm]
    steps:
      - uses: actions/checkout@v2

      - run: echo "Blocker Tests GrapQL ${{ matrix.clients }}"

  quality-report:
    runs-on: ubuntu-latest
    needs: [blocker-tests-desktop, blocker-tests-mobile, blocker-tests-graphql, static-analysis]
    if: |
      ${{ 
        ((needs.blocker-tests-graphql.outputs.status == 'success' || needs.blocker-tests-graphql.outputs.status == 'failure') 
        || (needs.blocker-tests-desktop.outputs.status == 'success' || needs.blocker-tests-desktop.outputs.status == 'failure') 
        || (needs.blocker-tests-mobile.outputs.status == 'success' || needs.blocker-tests-mobile.outputs.status == 'failure')) 
      }}
    steps:
      - uses: actions/checkout@v2

      - run: echo "Quality Report"
        
#   github-context:
#     if: needs.job1.result == 'success' || needs.job2.result == 'success'
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2

#       - name: Dump GitHub context
#         env:
#           GITHUB_CONTEXT: ${{ toJSON(github) }}
#         run: echo "$GITHUB_CONTEXT" > github_context.json

#       - name: Upload Test Results
#         if: always()
#         uses: actions/upload-artifact@v2
#         with:
#           path: github_context.json


  # TODO: after the pull request is merged into the develop we will execute the following jobs
  # push-to-develop:
  # blocker-tests:
  # contract-tests
  # performance-tests
